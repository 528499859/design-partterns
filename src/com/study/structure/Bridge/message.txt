桥接模式：
    将抽象与实现分离，使他们可以独立变化，他是用组合关系替代继承关系实现，从而降低了抽象和实现这两个可变维度的耦合度

    结构：
        抽象化（abstraction）角色：定义抽象类，并包含一个对实现化对象的引用
        扩展抽象化（Refined abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法
        变化类（implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用
        具体实现化（concrete implementor）角色：给出实现化角色接口的具体实现

    好处：
        桥接模式提高系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统
        例如在此demo中添加一个新的文件类型，只需要创建一个新的类型实现videoFile接口即可
        如新增一个linux系统，只需要创建一个新的系统继承OperatingSystem即可

    使用场景：
        当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时
        当一个系统不希望使用继承或因为多层继承导致系统类的个数急剧增加时
        当一个系统需要再构建的抽象化角色和具体角色之间增加更过灵活性时，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使他们
        在抽象层建立一个关联关系（主要是聚合）

