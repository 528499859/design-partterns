组合模式
    又称部分整体模式，是用于吧一组相似的对象作为一个单一的对象，组合模式依据树形结构来组合对象，用来表示部分以及整体层次，
    这种类型的设计模式属于结构型模式，他创建了对象组的树形结构

    结构：
        抽象根节点：定义系统各层次对象共有的方法和属性，可以预先定义一些默认的行为和属性
        树枝节点：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构
        叶子节点：叶子节点对象，旗下再无分支，是系统层次遍历的最小单位

    组合模式分类：
            透明组合模式：
                在透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，在实例中MenuComponent声明了add、remove
                getChild 方法，这样做的好处是确保所有构建类都有相同的接口，透明组合模式也是组合模式的标准形式
                透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一层级对象
                即不可能包含成员对象，因此为其提供 add（） remove（）等方法是没有意义的，虽然在编译阶段不会出错，但是在运行阶段
                如果调用这些方法可能就会出错（如果没有提供相应的错误处理）

            安全组合模式：
                在安全组合模式中，在抽闲构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点Menu中声明并实现这些方法，
                安全组合模式的缺点是不够透明，因为叶子构建容器和树枝构建容器具有不同的方法，并且树枝容器构建中的那些用于管理
                成员对象的方法并没有在抽象构建中定义，因此客户端不能完全针对抽象编程，必须有区别的对待叶子构建和树枝（容器）构建

    优点：
        组合模式可以清楚的定义分层次的复杂对象，表示对象的全部或部分层次，让客户忽略层次的差异，方便对真个层次结构进行控制
        客户端可以一致的使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化客户端代码
        在组合模式中增加新的树枝节点和叶子节点都很方便，不需要对现有类库进行任何修改，符合开闭原则
        组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构
        但对树形结构的控制缺非常简单

    使用场景：
        组合模式是应树形结构而生的，所以组合模式的使用场景就是出现树形结构的地方，比如文件目录显示，多级目录呈现
        树形结构的操作
