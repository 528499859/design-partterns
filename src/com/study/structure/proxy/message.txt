代理对象：
    概述:由于某些原因要给某个对象提供一个代理以控制该对象的访问，这时，访问对象不适合或者不能直接引用目标对象，
    代理对象作为访问对象和目标对象之间的中介

    java中的代理 按照代理类生成时机不同分为静态代理和动态代理，
        静态代理：静态代理代理类在编译期就生成
        动态代理：动态代理则是在java运行时动态生成，动态代理又分为JDK代理和CGLIB代理

    结构 proxy模式分为三种角色：
        抽象主题（Subject）类：通过接口或者抽象类声明真实主题和代理对象实现的业务方法
        真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的的真实对象，是最终要引用的对象
        代理（Proxy）类:提供了与真实主题相同的接口，其内部含有对真实主题的引用，他可以访问，控制、或者扩展真实主题的功能

    三种代理的对比
        JDK代理和CGLIB代理
            使用CGLIB实现动态代理，CGLIB底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率
            要高，唯一需要注意的是，CGLIB不能对声明为final的类或者方法进行代理，因为CGLIB原理是动态生成被代理类的子类

            在JDK1.6 JDK1.7 JDK1.8 逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量
            调用的时候，JDK1.6 JDK1.7比CGLIB代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLIB代理，所以如果有接口的时候
            使用JDK动态代理，如果没有接口则使用CGLIB代理

        动态代理和静态代理
            动态代理和静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器的一个集中的方法进行处理
            （invocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不像静态代理那样每一个
            方法进行中转

            如果接口中增加一个方法，静态代理模式出了所有实现类需要实现这个方法外，所有代理类也需要实现此方法，增加了代码维护的复杂度
            而动态代理不会出现这个问题

    优缺点：
        优点：
        1、代理欧式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用
        2、代理对象可以扩展目标对象的功能
        3、代理模式能将客户端和目标对象分离，在一定程度上降低了系统的耦合度
        缺点：
        1、增加了系统的复杂度

    使用场景：
        1、远程调用：本地服务通过网络请求远程服务，为了实现本地到远程的通行，我们需要实现网络通信，处理其中可能的异常，为良好的代码设计和可维护性
        我们将网络通信不分隐藏起来，只暴露给本地服务一个借口，通过该接口即可访问远程调用服务提供的功能，而不必多关心通信部分的细节

        2、防火墙代理：当将浏览器配置成使用代理功能时，防火墙就将你的浏览器请求转给互联网；当互联网返回相应时，代理服务器再把它转给你的浏览器

        3、保护代理：控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。
